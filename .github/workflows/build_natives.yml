name: CMake

on:
  push:
    branches: "**"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt' # See 'Supported distributions' for available options
        java-version: '8'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}} --config ${{env.BUILD_TYPE}}
      
    - uses: actions/upload-artifact@v3
      with:
        name: native-linux-amd64
        path: ${{github.workspace}}/*.so
    
  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt' # See 'Supported distributions' for available options
        java-version: '8'
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -T ClangCL .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}} --config ${{env.BUILD_TYPE}}
      
    - uses: actions/upload-artifact@v3
      with:
        name: native-windows-amd64
        path: ${{github.workspace}}\${{env.BUILD_TYPE}}\*.dll
    
  build-mac:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt' # See 'Supported distributions' for available options
        java-version: '8'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}} --config ${{env.BUILD_TYPE}}

    - uses: actions/upload-artifact@v3
      with:
        name: native-mac-amd64
        path: ${{github.workspace}}/*.dylib
    
      
  build-mac-cross-m1:
    needs: [ build-linux, build-windows, build-mac ]
    
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt' # See 'Supported distributions' for available options
        java-version: '8'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DCMAKE_OSX_ARCHITECTURES="arm64" .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}} --config ${{env.BUILD_TYPE}}

    - uses: actions/download-artifact@v3
      with:
        name: native-windows-amd64
        path: ${{github.workspace}}/amd64
    
    - uses: actions/download-artifact@v3
      with:
        name: native-linux-amd64
        path: ${{github.workspace}}/amd64

    - uses: actions/download-artifact@v3
      with:
        name: native-mac-amd64
        path: ${{github.workspace}}/amd64

    - name: Rename Apple Silicon native to append architecture
      with:
        run: |
          brew install rename
          cd ${{github.workspace}}/
          rename -a -aarch64 *

    - name: Rename natives to append architecture
      with:
        run: |
          brew install rename
          cd ${{github.workspace}}/amd64
          rename -a amd64- *
    
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "natives-${GITHUB_REF}"
        prerelease: true
        title: "Natives from ${GITHUB_REF#refs/heads/}"
        files: |
          ${{github.workspace}}/*.dll
          ${{github.workspace}}/*.so
          ${{github.workspace}}/*.dylib
