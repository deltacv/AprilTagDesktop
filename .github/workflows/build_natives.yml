name: CMake

on:
  push:
    branches-ignore: ['main']
  pull_request:
    branches-ignore: ['main']

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt' # See 'Supported distributions' for available options
        java-version: '8'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}} --config ${{env.BUILD_TYPE}}

  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt' # See 'Supported distributions' for available options
        java-version: '8'

    - name: Set up MinGW
      uses: egor-tensin/setup-mingw@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}} --config ${{env.BUILD_TYPE}}
    
  build-mac:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt' # See 'Supported distributions' for available options
        java-version: '8'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}} --config ${{env.BUILD_TYPE}}
